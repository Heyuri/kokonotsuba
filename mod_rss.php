<?php
class mod_rss extends ModuleHelper {
	// Maximum number of articles generated by RSS
	private $FEED_COUNT = 10;
	// RSS update timing (1: update when browsing MODULEPAGE, 2: update when new articles are posted)
	private $FEED_UPDATETYPE = 2;
	// Data extraction form (T: thread orientation, P: article orientation)
	private $FEED_DISPLAYTYPE = 'T';
	// Data status temporary file (check whether the data needs to be updated)
	private $FEED_STATUSFILE;
	// Temporary archive of data output (static cache Feed format)
	private $FEED_CACHEFILE = 'rss.xml';

	// Base URL
	private $BASEDIR;
	// RSS link
	private $SELF;

	public function __construct($PMS) {
		parent::__construct($PMS);

		$globalHTML = new globalHTML($this->board);
		$this->BASEDIR = $globalHTML->fullURL();
		switch ($this->FEED_UPDATETYPE) {
			case 1: // MODULEPAGE
				$this->SELF = $this->BASEDIR.$this->getModulePageURL();
				$this->FEED_STATUSFILE = __CLASS__.'.tmp';
				break;
			case 2: // Update on RegistAfterCommit
				$this->SELF = $this->BASEDIR.$this->FEED_CACHEFILE;
				break;
		}
	}

	public function getModuleName() {
		return $this->moduleNameBuilder('提供 RSS Feed 訂閱服務');
	}

	public function getModuleVersionInfo() {
		return 'Koko BBS Release 1';
	}

	/* Add a <link> tag to RSS to the page*/
	public function autoHookHead(&$txt, $isReply){
		$txt .= '<link rel="alternate" type="application/rss+xml" title="RSS 2.0 Feed" href="'.$this->SELF.'">';
	}

	public function autoHookToplink(&$linkbar, $isReply){
		$linkbar .= ' [<a href="'.$this->SELF.'">RSS feed</a>] ';
	}

	/* Update the RSS file after the article is saved ($this->FEED_UPDATETYPE == 2 triggers) */
	public function autoHookRegistAfterCommit(){
		if ($this->FEED_UPDATETYPE == 2) {
			$this->GenerateCache();
		}
	}

	public function ModulePage() {
		if ($this->IsDATAUpdated()) {
			// If the data has been updated, the RSS feed cache is also updated
			$this->GenerateCache();
		}
		// Redirect to static cache
		$this->RedirectToCache();
	}

	/* Check if the data is updated */
	private function IsDATAUpdated() {
		// Force update of RSS feed
		if(isset($_GET['force'])) return true;

		$PIO = PIOPDO::getInstance();
		$lastNo = $this->board->getLastPostNoFromBoard() - 1;
		// Read status cache data
		$lastNoCache = file_exists($this->FEED_STATUSFILE) ?
			file_get_contents($this->FEED_STATUSFILE) : 0;
		// If same LastNo, no updates
		if($lastNo == $lastNoCache) return false;

		$fp = fopen($this->FEED_STATUSFILE, 'w');
		flock($fp, LOCK_EX);
		fwrite($fp, $lastNo);
		flock($fp, LOCK_UN);
		fclose($fp);
		@chmod($this->FEED_STATUSFILE, 0666);
		return true;
	}

	/* Generate / update static cache RSS Feed file */
	private function GenerateCache() {
		$PIO = PIOPDO::getInstance();
		$FileIO = PMCLibrary::getFileIOInstance();
		$boardTitle = $this->board->getBoardTitle();
		// Time zone format used in the RFC standard
		$RFC_timezone = ' '.($this->config['TIME_ZONE'] < 0 ? '-' : '+').substr('0'.abs($this->config['TIME_ZONE']), -2).'00';

		switch ($this->FEED_DISPLAYTYPE) {
			case 'T':
				// Get out the first n discussion string, the first article number
				$plist = $PIO->getPostsFromBoard($this->board, 0, $this->FEED_COUNT);
				$plist_count = count($plist);
				// Why do you take it this way? To avoid SQL-lite automatic sorting from losing time order
				$post = array();
				for ($p = 0; $p < $plist_count; $p++) {
					// Take out numbered article data
					$post[] = current($PIO->fetchPosts($plist[$p]));
				}
				break;
			case 'P':
				// Get the first n article numbers
				$plist = $PIO->getThreadListFromBoard($this->board, 0, $this->FEED_COUNT);
				$post = $PIO->getThreadOpPostsFromList($plist);
				break;
		}
		$post_count = count($post);
		// RSS feed content
		$tmp_c = '<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>'.$boardTitle.'</title>
<link>'.$this->BASEDIR.'</link>
<description>'.$boardTitle.'</description>
<language>'.$this->config['PIXMICAT_LANGUAGE'].'</language>
<generator>'.$this->getModuleName().' '.$this->getModuleVersionInfo().'</generator>
<atom:link href="'.$this->SELF.'" rel="self" type="application/rss+xml">
';
		for ($i = 0; $i < $post_count; $i++) {
			$imglink = ''; // Image files
			$resto = 0; // To respond
			list($no, $resno, $thread_uid, $time, $tw, $th, $tim, $ext, $sub, $com) = array(
				$post[$i]['no'],
				$PIO->resolveThreadNumberFromUID($post[$i]['thread_uid']),
				$post[$i]['thread_uid'],
				substr($post[$i]['tim'], 0, -3),
				$post[$i]['tw'],
				$post[$i]['th'],
				$post[$i]['tim'],
				$post[$i]['ext'],
				$post[$i]['sub'],
				$post[$i]['com']
			);

			// Processing data
			if ($ext && $FileIO->imageExists($tim.'s.jpg', $this->board)) {
				$imglink = sprintf('<img src="%s" alt="%s" width="%d" height="%d"><br>',
					$FileIO->getImageURL($tim.'s.jpg', $this->board),
					$tim.$ext,
					$tw,
					$th
				);
			}
			// Local time RFC standard format
			$time = gmdate("D, d M Y H:i:s", $time + $this->config['TIME_ZONE'] * 60 * 60).$RFC_timezone;
			$reslink = $this->BASEDIR.$this->config['PHP_SELF'].'?res='.($resno ? $resno : $no);
			switch ($this->FEED_DISPLAYTYPE) {
				case 'T':
					// Title No. Number (Res: Number of Responses)
					$titleBar = $sub.' No.'.$no.' (Res: '.($PIO->getPostCountFromThread($thread_uid) - 1).')';
					break;
				case 'P':
					// Title (number)
					$titleBar = $sub.' ('.$no.')';
					break;
			}

			$tmp_c .= '<item>
	<title>'.$titleBar.'</title>
	<link>'.$reslink.'</link>
	<description>
	<![CDATA[
'.$imglink.$com.'
	]]>
	</description>
	<comments>'.$reslink.'</comments>
	<guid isPermaLink="true">'.$reslink.'#r'.$no.'</guid>
	<pubDate>'.$time.'</pubDate>
</item>
';
		}
		$tmp_c .= '</atom:link> </channel>
</rss>';
		$fp = fopen($this->FEED_CACHEFILE, 'w');
		flock($fp, LOCK_EX);
		fwrite($fp, $tmp_c);
		flock($fp, LOCK_UN);
		fclose($fp);
		@chmod($this->FEED_CACHEFILE, 0666);
	}

	/* Redirect to static cache */
	private function RedirectToCache() {
		header('HTTP/1.1 302 Moved Temporarily');
		header('Location: '.$this->BASEDIR.$this->FEED_CACHEFILE);
	}
}
